version: '3.8'

services:
  api:
    container_name: kovyra-api-staging
    build:
      context: ../../..
      dockerfile: server/docker/staging/Dockerfile
    ports:
      - '${PORT}:3000'
    environment:
      - NODE_ENV=staging
      - DATABASE_URL=${DATABASE_URL}
      - LOG_LEVEL=debug
    depends_on:
      db:
        condition: service_healthy
    networks:
      - kovyra-staging-network
    restart: always
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/health']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  db:
    container_name: kovyra-db-staging
    image: postgres:16-alpine
    ports:
      - '${POSTGRES_PORT}:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kovyra-staging-network
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Redis for caching (like production)
  redis:
    container_name: kovyra-redis-staging
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - kovyra-staging-network
    restart: always
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Staging-specific: Monitoring with Prometheus & Grafana
  prometheus:
    container_name: kovyra-prometheus-staging
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'
    networks:
      - kovyra-staging-network
    restart: always

  grafana:
    container_name: kovyra-grafana-staging
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - '3001:3000'
    depends_on:
      - prometheus
    networks:
      - kovyra-staging-network
    restart: always

volumes:
  postgres_data:
    name: kovyra-postgres-data-staging
  prometheus_data:
    name: kovyra-prometheus-data-staging
  grafana_data:
    name: kovyra-grafana-data-staging

networks:
  kovyra-staging-network:
    name: kovyra-network-staging
    driver: bridge
