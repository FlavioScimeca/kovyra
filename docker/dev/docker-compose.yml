version: '3.8'

services:
  app:
    build:
      context: ../..
      dockerfile: docker/dev/Dockerfile
      args:
        - DOCKER_BUILDKIT=1
    volumes:
      - ../../server:/app/server
      - ../../tsconfig.json:/app/tsconfig.json
      - ../../nest-cli.json:/app/nest-cli.json
      - /app/node_modules
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PNPM_HOME=/home/node/.local/share/pnpm
      - PATH=/home/node/.local/share/pnpm:$PATH
    env_file:
      - ../../environment/.env.development
    user: node
    command: pnpm run start:dev
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          memory: 512M
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_USER=${DB_USERNAME:-postgres}
      - POSTGRES_DB=${DB_DATABASE:-kovyra_dev}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    env_file:
      - ../../environment/.env.development

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=pgadmin
    ports:
      - '5050:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
