version: '3.8'

services:
  app:
    build:
      context: ../..
      dockerfile: docker/prod/Dockerfile
      args:
        - NODE_ENV=production
    restart: always
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
    environment:
      - NODE_ENV=production
      - PNPM_HOME=/home/node/.local/share/pnpm
      - PATH=/home/node/.local/share/pnpm:$PATH
    env_file:
      - ../../environment/.env.production
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:4001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.api.rule=Host(`api.kovyra.com`)'
      - 'traefik.http.routers.api.entrypoints=websecure'
      - 'traefik.http.routers.api.tls.certresolver=myresolver'

  postgres:
    image: postgres:14-alpine
    restart: always
    env_file:
      - ../../environment/.env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  traefik:
    image: traefik:v2.9
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_data:/etc/traefik/acme
    command:
      - '--api.insecure=false'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--certificatesresolvers.myresolver.acme.tlschallenge=true'
      - '--certificatesresolvers.myresolver.acme.email=admin@kovyra.com'
      - '--certificatesresolvers.myresolver.acme.storage=/etc/traefik/acme/acme.json'
    networks:
      - app-network
    restart: always

  prometheus:
    image: prom/prometheus
    volumes:
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - app-network
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`prometheus.kovyra.com`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls.certresolver=myresolver'
      - 'traefik.http.routers.prometheus.middlewares=prometheus-auth'
      - 'traefik.http.middlewares.prometheus-auth.basicauth.users=admin:$$apr1$$ryHGa8yK$$5lRELezhgkUtJxiJ.XTfZ.'

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    restart: always
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.grafana.rule=Host(`grafana.kovyra.com`)'
      - 'traefik.http.routers.grafana.entrypoints=websecure'
      - 'traefik.http.routers.grafana.tls.certresolver=myresolver'

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  traefik_data:
  prometheus_data:
  grafana_data:
